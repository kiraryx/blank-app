# Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
import streamlit as st
st.set_page_config(page_title="Credit Coach BCC", page_icon="üè¶")
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns

# –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã (–±–µ–ª—ã–π —Ñ–æ–Ω, –∑–µ–ª—ë–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã –ë–¶–ö)
st.markdown("""
    <style>
    .main {
        background-color: #FFFFFF;
    }
    .stButton>button {
        background-color: #00A859;
        color: white;
        border-radius: 5px;
    }
    .stMetric {
        border: 2px solid #00A859;
        border-radius: 5px;
        padding: 10px;
    }
    h1, h2, h3 {
        color: #00A859;
    }
    </style>
""", unsafe_allow_html=True)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
np.random.seed(42)
n_samples = 1000
data = {
    'income': np.random.normal(300000, 50000, n_samples),
    'expenses': np.random.normal(180000, 30000, n_samples),
    'late_payments': np.random.randint(0, 5, n_samples),
    'account_balance': np.random.normal(50000, 10000, n_samples),
    'fines': np.random.randint(0, 3, n_samples),
    'tax_debt': np.random.normal(5000, 2000, n_samples),
    'active_loans': np.random.randint(0, 5, n_samples),
    'credit_score': np.random.randint(300, 850, n_samples)
}
df = pd.DataFrame(data)
X = df[['income', 'expenses', 'late_payments', 'account_balance', 'fines', 'tax_debt', 'active_loans']]
y = df['credit_score']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# –§—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è API eGov.kz
def check_egov_data(iin):
    fines = np.random.randint(0, 3)
    tax_debt = np.random.normal(5000, 2000)
    return fines, tax_debt

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
def approval_probability(credit_score, monthly_payment, income, expenses, active_loans, loan_payments):
    free_balance = income - expenses - loan_payments  # –°–≤–æ–±–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å
    if credit_score < 600 or monthly_payment > free_balance * 0.5 or active_loans > 3:
        return False, "–ö—Ä–µ–¥–∏—Ç –Ω–µ –æ–¥–æ–±—Ä–µ–Ω: –Ω–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ–≤."
    return True, "–ö—Ä–µ–¥–∏—Ç, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω."

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–±–æ–ª–µ–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
def generate_recommendations(client_data, loan_amount, loan_term_months, iin, loan_payments):
    # client_data: [income, expenses, late_payments, account_balance, fines, tax_debt, active_loans]
    # loan_payments: —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —Ç–µ–∫—É—â–∏–º –∫—Ä–µ–¥–∏—Ç–∞–º (‚Ç∏)
    
    fines, tax_debt = check_egov_data(iin)
    client_data[4] = fines
    client_data[5] = tax_debt
    current_score = model.predict([client_data])[0]
    monthly_payment = loan_amount / loan_term_months
    free_balance = client_data[0] - client_data[1] - loan_payments  # –°–≤–æ–±–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å
    recommendations = []
    loan_suggestions = []

    # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if client_data[2] > 0:
        recommendations.append(
            f"–£ –≤–∞—Å {client_data[2]} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π. –ü–æ–≥–∞—Å–∏—Ç–µ –∏—Ö –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Å–∏–ª—å–Ω–æ —Å–Ω–∏–∂–∞—é—Ç –≤–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ë–¶–ö –∏–ª–∏ —á–µ—Ä–µ–∑ eGov.kz –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –∏—Ö –æ–Ω–ª–∞–π–Ω."
        )
    
    if client_data[4] > 0:
        recommendations.append(
            f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {client_data[4]} –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ü–î–î). "
            "–ó–∞–π–¥–∏—Ç–µ –Ω–∞ eGov.kz, —Ä–∞–∑–¥–µ–ª '–®—Ç—Ä–∞—Ñ—ã', –æ–ø–ª–∞—Ç–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ 3‚Äì5 –¥–Ω–µ–π."
        )
    
    if client_data[5] > 0:
        recommendations.append(
            f"–£ –≤–∞—Å –¥–æ–ª–≥ –ø–æ –Ω–∞–ª–æ–≥–∞–º: {client_data[5]:.2f} ‚Ç∏. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–∞–∑–∞ –≤ –∫—Ä–µ–¥–∏—Ç–µ. "
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ eGov.kz, —Ä–∞–∑–¥–µ–ª '–ù–∞–ª–æ–≥–∏', –ø–æ–≥–∞—Å–∏—Ç–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–æ–±—ã—á–Ω–æ 5‚Äì7 –¥–Ω–µ–π)."
        )
    
    if client_data[6] > 2:
        recommendations.append(
            f"–£ –≤–∞—Å {client_data[6]} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤, —á—Ç–æ —Å–æ–∑–¥–∞—ë—Ç –≤—ã—Å–æ–∫—É—é –¥–æ–ª–≥–æ–≤—É—é –Ω–∞–≥—Ä—É–∑–∫—É. "
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫—Ä—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—Ä–µ–¥–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π —Å—É–º–º–æ–π). "
            "–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ë–¶–ö –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏."
        )
    
    if client_data[1] > client_data[0] * 0.5:
        recommendations.append(
            "–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç –±–æ–ª–µ–µ 50% –¥–æ—Ö–æ–¥–∞, —á—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –≤–∞—à—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤ –≥–ª–∞–∑–∞—Ö –±–∞–Ω–∫–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ —á–∞—Å—Ç—ã–µ –ø–æ–∫—É–ø–∫–∏) –Ω–∞ 10‚Äì20% –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì2 –º–µ—Å—è—Ü–µ–≤."
        )
    
    if free_balance < monthly_payment * 2:
        recommendations.append(
            f"–í–∞—à —Å–≤–æ–±–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º: {free_balance:.2f} ‚Ç∏. "
            "–ù–æ–≤—ã–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –ø–ª–∞—Ç—ë–∂ ({monthly_payment:.2f} ‚Ç∏) –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50% —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞, —á—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç —à–∞–Ω—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ."
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è
    approved, approval_reason = approval_probability(current_score, monthly_payment, client_data[0], client_data[1], client_data[6], loan_payments)
    if not approved:
        recommendations.append(approval_reason)
        new_term = int(loan_amount / (free_balance * 0.5)) + 1
        new_payment = loan_amount / new_term
        loan_suggestions.append(
            f"–£–≤–µ–ª–∏—á—å—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –¥–æ {new_term} –º–µ—Å—è—Ü–µ–≤ ‚Äî —ç—Ç–æ —Å–Ω–∏–∑–∏—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –¥–æ {new_payment:.2f} ‚Ç∏, "
            "—á—Ç–æ —É–ª–æ–∂–∏—Ç—Å—è –≤ –≤–∞—à —Å–≤–æ–±–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏ –ø–æ–≤—ã—Å–∏—Ç —à–∞–Ω—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ."
        )
        new_amount = free_balance * 0.5 * loan_term_months
        loan_suggestions.append(
            f"–ò–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ –¥–æ {new_amount:.2f} ‚Ç∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ä–æ–∫–∞ ({loan_term_months} –º–µ—Å—è—Ü–µ–≤), "
            "—á—Ç–æ–±—ã –ø–ª–∞—Ç—ë–∂ –±—ã–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 50% –≤–∞—à–µ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞."
        )
        if current_score < 600:
            loan_suggestions.append(
                "–í–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∏–∂–µ 600. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–∑–∞—ë–º—â–∏–∫–∞ –∏–ª–∏ –ø–æ—Ä—É—á–∏—Ç–µ–ª—è —Å —Ö–æ—Ä–æ—à–µ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π. "
                "–≠—Ç–æ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ –ë–¶–ö, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ–∑–∞—ë–º—â–∏–∫–∞."
            )
        loan_suggestions.append(
            "–ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏ ‚Äî –¥–∞–Ω–Ω—ã–µ –≤ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º –±—é—Ä–æ –æ–±–Ω–æ–≤—è—Ç—Å—è, –∏ –≤–∞—à–∏ —à–∞–Ω—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –≤—ã—Ä–∞—Å—Ç—É—Ç. "
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ë–¶–ö."
        )
    
    if not recommendations:
        recommendations.append("–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ë–¶–ö.")

    return recommendations, loan_suggestions, current_score, approved

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –ë–¶–ö
st.image("images/bcclog.png", width=600) 

st.title("Credit Coach BCC")
st.subheader("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏") 

# –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
with st.form("client_form"):
    iin = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ò–ù (12 —Ü–∏—Ñ—Ä)", max_chars=12)
    income = st.number_input("–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ (‚Ç∏)", min_value=0, value=250000)
    expenses = st.number_input("–ú–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (‚Ç∏)", min_value=0, value=150000)
    late_payments = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–∫", min_value=0, value=1)
    active_loans = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤", min_value=0, value=3)
    loan_payments = st.number_input("–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —Ç–µ–∫—É—â–∏–º –∫—Ä–µ–¥–∏—Ç–∞–º (‚Ç∏/–º–µ—Å—è—Ü)", min_value=0, value=50000)
    loan_amount = st.number_input("–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ (‚Ç∏)", min_value=0, value=3000000)
    loan_term_months = st.number_input("–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–º–µ—Å—è—Ü—ã)", min_value=1, value=6)
    submitted = st.form_submit_button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å")

if submitted:
    client_data = [income, expenses, late_payments, 50000, 0, 0, active_loans]  # account_balance –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    recommendations, loan_suggestions, current_score, approved = generate_recommendations(
        client_data, loan_amount, loan_term_months, iin, loan_payments
    )

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    st.metric("–í–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥", f"{current_score:.2f}")
    st.metric("–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", "–û–¥–æ–±—Ä–µ–Ω–æ" if approved else "–û—Ç–∫–∞–∑–∞–Ω–æ")

    st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞")
    for rec in recommendations:
        st.write(f"- {rec}")

    if loan_suggestions:
        st.subheader("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫—Ä–µ–¥–∏—Ç—É")
        for suggestion in loan_suggestions:
            st.write(f"- {suggestion}")
    else:
        st.success("–í–∞—à –∫—Ä–µ–¥–∏—Ç, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –æ–¥–æ–±—Ä—è—Ç –Ω–∞ —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö!")

    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    st.subheader("–ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥?")
    factors = ['–î–æ—Ö–æ–¥—ã', '–†–∞—Å—Ö–æ–¥—ã', '–ü—Ä–æ—Å—Ä–æ—á–∫–∏', '–®—Ç—Ä–∞—Ñ—ã', '–ù–∞–ª–æ–≥–∏', '–ö—Ä–µ–¥–∏—Ç—ã']
    importance = model.feature_importances_[[0, 1, 2, 4, 5, 6]]  # –ò—Å–∫–ª—é—á–∞–µ–º account_balance
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(x=importance, y=factors, palette=['#00A859' if i < 3 else '#66C2A5' for i in range(len(factors))])
    ax.set_xlabel("–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥", fontsize=12)
    ax.set_title("–ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥?", fontsize=14, pad=20)
    ax.grid(True, axis='x', linestyle='--', alpha=0.7)
    for i, v in enumerate(importance):
        ax.text(v + 0.01, i, f"{v:.2%}", va='center', fontsize=10)
    plt.tight_layout()
    st.pyplot(fig)